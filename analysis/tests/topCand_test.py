import unittest
import argparse
from coffea.util import load
import yaml
from parser import wrapper
import sys
from copy import copy

import numpy as np
import awkward as ak
from coffea.nanoevents.methods import vector
import time

import os
sys.path.insert(0, os.getcwd())
from python.analysis.helpers.topCandReconstruction import find_tops, find_tops_slow, buildTop


class topCandRecoTestCase(unittest.TestCase):

    @classmethod
    def setUpClass(self):
        self.inputFile = wrapper.args["inputFile"]


        #
        # Test vectors from picos
        #   (from python.analysis.helpers.topCandReconstruction import dumpTopCandidateTestVectors
        #   python runner.py -t -o test.coffea -d GluGluToHHTo4B_cHHH1 -p coffea4bees/analysis/processors/processor_HH4b.py -y UL17  -op coffea4bees/analysis/hists/ -m $DATASETS
        #
        self.input_jet_pt   = [[140.16835021972656, 135.59121704101562, 58.99290084838867, 46.69675827026367], [112.66857147216797, 81.65150451660156, 87.19490051269531, 68.40691375732422], [172.73770141601562, 82.6832504272461, 86.10943603515625, 62.091487884521484, 46.807315826416016, 44.72425079345703], [182.73670959472656, 173.9521942138672, 54.7447624206543, 53.8582649230957, 51.38298034667969, 45.54498291015625], [165.2755889892578, 115.32014465332031, 92.5178451538086, 85.9405746459961], [194.4156951904297, 186.0968475341797, 173.39366149902344, 82.69761657714844, 54.27119827270508], [119.172607421875, 62.03846740722656, 68.98473358154297, 56.673439025878906], [281.00933837890625, 216.72657775878906, 89.45651245117188, 74.25934600830078], [145.6790008544922, 103.01795196533203, 83.05353546142578, 60.624359130859375], [173.36849975585938, 75.07015228271484, 80.28221893310547, 60.64315414428711, 49.678794860839844]]
        self.input_jet_eta  = [[0.1096038818359375, 0.8499755859375, 0.68994140625, 0.739990234375], [1.609619140625, 1.9853515625, 1.050537109375, 0.47723388671875], [1.499755859375, 0.7513427734375, 1.0859375, 1.208984375, 1.600830078125, -1.7783203125], [-0.540771484375, 0.6407470703125, 0.748291015625, 0.2596435546875, -0.40521240234375, -2.150390625], [0.219085693359375, 0.29986572265625, 0.018909454345703125, 0.575927734375], [-0.17987060546875, 0.03620147705078125, 0.03942108154296875, 0.17266845703125, -1.11376953125], [0.33697509765625, 1.10791015625, 0.34423828125, 1.099609375], [-0.7080078125, -0.008638381958007812, 0.36285400390625, -0.126678466796875], [1.84521484375, 0.7181396484375, -1.94873046875, 0.354248046875], [0.08477783203125, -0.8414306640625, -0.80615234375, -1.07568359375, 1.796630859375]]
        self.input_jet_phi  = [[3.9184393882751465, 0.05915069580078125, 1.52587890625, 2.1796875], [3.4711737632751465, 0.726806640625, 0.230377197265625, 3.4438300132751465], [3.8818182945251465, 3.2997870445251465, 1.678955078125, 6.1823859214782715, 1.368408203125, 6.1073126792907715], [4.0634589195251465, 1.24072265625, 6.1281256675720215, 0.771240234375, 3.0615234375, 5.4072089195251465], [1.09814453125, 0.131011962890625, 3.9897284507751465, 3.3266425132751465], [5.0912909507751465, 2.62939453125, 0.5579833984375, 5.9275336265563965, 3.1835761070251465], [3.7221503257751465, 1.49560546875, 0.6768798828125, 5.9803290367126465], [4.1640448570251465, 0.6983642578125, 1.4599609375, 3.4633612632751465], [5.6082587242126465, 3.3491034507751465, 1.480712890625, 1.0634765625], [0.1205596923828125, 4.2912421226501465, 5.6329169273376465, 2.66455078125, 2.41259765625]]
        self.input_jet_mass = [[15.705591201782227, 14.528794288635254, 12.136560440063477, 8.822479248046875], [13.404942512512207, 19.26129913330078, 11.17745304107666, 14.095455169677734], [15.880775451660156, 9.785478591918945, 14.618119239807129, 13.560037612915039, 7.061315536499023, 7.557424545288086], [21.70707893371582, 21.006418228149414, 9.488357543945312, 10.338143348693848, 8.53251838684082, 7.158407688140869], [19.576068878173828, 11.373392105102539, 20.668880462646484, 13.263968467712402], [17.71791648864746, 17.895217895507812, 17.605403900146484, 9.833532333374023, 5.991733074188232], [14.482348442077637, 7.906634330749512, 7.162547588348389, 11.162458419799805], [27.518123626708984, 14.011600494384766, 13.920695304870605, 11.610854148864746], [13.706096649169922, 11.324729919433594, 11.855829238891602, 6.432255744934082], [17.781383514404297, 10.524158477783203, 13.504823684692383, 8.53320598602295, 11.778233528137207]]
        self.input_jet_btagScore = [[0.99560546875, 0.9970703125, 0.99072265625, 0.9990234375], [0.99951171875, 0.0093231201171875, 0.970703125, 0.7041015625], [0.99951171875, 0.99951171875, 0.98828125, 0.2337646484375, 0.005176544189453125, 0.0079193115234375], [0.97265625, 0.86328125, 0.59228515625, 0.00865936279296875, 0.247802734375, 0.01262664794921875], [0.99560546875, 0.99169921875, 0.01300811767578125, 0.9951171875], [0.595703125, 0.8212890625, 0.00920867919921875, 0.73876953125, 0.0283355712890625], [0.004283905029296875, 0.490234375, 0.65966796875, 0.998046875], [0.06085205078125, 0.7099609375, 0.9990234375, 0.99951171875], [0.9990234375, 0.9970703125, 0.0067596435546875, 0.9716796875], [0.998046875, 0.99951171875, 0.9990234375, 0.005649566650390625, 0.01500701904296875]]
        self.input_jet_bRegCorr = [[1.0029296875, 1.037109375, 1.091796875, 1.00390625], [1.015625, 0.96044921875, 1.1591796875, 1.2216796875], [0.99951171875, 1.0205078125, 1.1708984375, 1.13671875, 1.1806640625, 1.0986328125], [1.01171875, 0.98291015625, 1.0615234375, 1.0234375, 1.048828125, 1.072265625], [0.9462890625, 1.0537109375, 0.99072265625, 1.1298828125], [1.0205078125, 1.0751953125, 0.98583984375, 1.0341796875, 1.0771484375], [1.0341796875, 1.2158203125, 1.1748046875, 1.0732421875], [0.994140625, 1.099609375, 1.0556640625, 1.349609375], [1.0478515625, 1.0986328125, 1.0322265625, 1.1767578125], [0.98876953125, 1.0576171875, 1.1572265625, 0.92822265625, 1.1064453125]]
        self.output_xbW = [4.253667729782495, -1.1214188758884007, 0.750055865282183, 1.703820259533074, -1.563212175627837, -3.0744655092216484, -2.017395983183767, -0.42872097922266234, 6.5011742648867, 0.16312423719837563]
        self.output_xW = [5.5276476935872925, 5.880895599970542, 3.153693288134476, 2.26726118200996, 5.953437518313905, 5.904672004357648, 5.27385223641202, 8.452781110609463, 6.0801701705936955, 6.330526078871486]

        self.input_jets = ak.zip(
            {
                "pt": self.input_jet_pt,
                "eta": self.input_jet_eta,
                "phi": self.input_jet_phi,
                "mass": self.input_jet_mass,
                "btagScore": self.input_jet_btagScore,
                "bRegCorr": self.input_jet_bRegCorr,
            },
            with_name="PtEtaPhiMLorentzVector",
            behavior=vector.behavior,
        )

        self.input_jets = self.input_jets[ak.argsort(self.input_jets.btagScore, axis=1, ascending=False)]

    def test_topCand_time(self):

        start = time.perf_counter()
        top_cands = find_tops_slow(self.input_jets)
        end = time.perf_counter()
        elapsed_time_bare_python = (end - start)
        print(f"\nElapsed time Bare Python = {elapsed_time_bare_python}s")

        start = time.perf_counter()
        top_cands = find_tops(self.input_jets)
        end = time.perf_counter()
        elapsed_time_with_compilation = (end - start)
        print(f"Elapsed time (with compilation) = {elapsed_time_with_compilation}s")

        start = time.perf_counter()
        top_cands = find_tops(self.input_jets)
        end = time.perf_counter()
        elapsed_time_after_compilation = (end - start)
        print(f"Elapsed time (after compilation) = {elapsed_time_after_compilation}s")

        self.assertTrue(elapsed_time_after_compilation < elapsed_time_with_compilation,
                        f"{elapsed_time_after_compilation} is not less than {elapsed_time_bare_python}")


    def test_buildTopCand(self):
        top_cands = find_tops(self.input_jets)

        _, rec_top_cands = buildTop(self.input_jets, top_cands)
        xW_min = rec_top_cands[:, 0].xW
        xbW_min = rec_top_cands[:, 0].xbW

        xW_allClose = np.allclose(xW_min.to_list(), self.output_xW, atol=1e-3)
        if not xW_allClose:
            print([xW_min[i] for i in range(len(xW_min))])
            print(f"xW_min is {xW_min} vs {self.output_xW}  diff {xW_min - self.output_xW}   ({(xW_min - self.output_xW)/self.output_xW})")
            print(f'\nself.output_xW  = {[xW_min[i] for i in range(len(xW_min))]}')

        # print([xbW_min[i] for i in range(len(xbW_min))])
        # print(f"xbW_min is {xbW_min} vs {self.output_xbW} diff {xbW_min - self.output_xbW} ({(xbW_min - self.output_xbW)/self.output_xbW})")

        xbW_allClose = np.allclose(xbW_min.to_list(), self.output_xbW, atol=1e-3)
        if not xbW_allClose:
            print([xbW_min[i] for i in range(len(xbW_min))])
            print(f"xbW_min is {xbW_min} vs {self.output_xbW}  diff {xbW_min - self.output_xbW}   ({(xbW_min - self.output_xbW)/self.output_xbW})")
            print(f'\nself.output_xbW  = {[xbW_min[i] for i in range(len(xbW_min))]}')

        self.assertTrue(xW_allClose, "xW Arrays are not close enough")
        self.assertTrue(xbW_allClose, "xbW Arrays are not close enough")


if __name__ == '__main__':
    wrapper.parse_args()
    unittest.main(argv=sys.argv)
