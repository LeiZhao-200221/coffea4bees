workflow:
  rules:
    # here the order matter!
    # does not run with changes in .md files
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BEFORE_SHA !~ /0{40}/'
      changes:
        - "{*[^.]md*,*.[^m]*,*.m,*.m[^d]*,*.md?*,*[^d]}"
      when: never
    # does not run when creating tags
    - if: $CI_COMMIT_TAG
      when: never
    # does not run if branches start with test_
    - if: $CI_COMMIT_BRANCH =~ /test_/
      when: never
    # it runs with any branch
    - if: $CI_COMMIT_BRANCH
    # allow merge request pipelines to run
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

stages:          
  - build
  - test
  - plot

voms_proxy:
  stage: build
  image: gitlab-registry.cern.ch/cms-cloud/cmssw-docker/cc7-cms 
  artifacts:
    paths:
      - proxy
  script:
    - mkdir -p ${HOME}/.globus
    - printf "${GRID_USERCERT}" | base64 -d > ${HOME}/.globus/usercert.pem
    - printf "${GRID_USERKEY}" | base64 -d > ${HOME}/.globus/userkey.pem
    - chmod 400 ${HOME}/.globus/userkey.pem
    - printf "${GRID_PASSWORD}" | base64 -d | voms-proxy-init --voms cms --pwstdin
    - voms-proxy-info --all
    - export VOMSPROXY=$(voms-proxy-info -path)
    - mkdir proxy
    - cp ${VOMSPROXY} proxy/x509_proxy


#### from https://gitlab.cern.ch/gitlabci-examples/build_docker_image/-/blob/master/.gitlab-ci.yml?ref_type=heads
build_kaniko_command:
    stage: build
    variables:
      # To push to a specific docker tag other than latest(the default), amend the --destination parameter, e.g. --destination $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME
      # See https://docs.gitlab.com/ee/ci/variables/predefined_variables.html#variables-reference for available variables
      IMAGE_DESTINATION_LATEST: ${CI_REGISTRY_IMAGE}:latest
      IMAGE_DESTINATION: ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHORT_SHA
    image: 
        # The kaniko debug image is recommended because it has a shell, and a shell is required for an image to be used with GitLab CI/CD.
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    script:
        # Prepare Kaniko configuration file
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
        # Build and push the image from the Dockerfile at the root of the project.
        - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/.dockerfiles/Dockerfile_analysis --destination $IMAGE_DESTINATION --destination $IMAGE_DESTINATION_LATEST
        # Print the full registry path of the pushed image
        - echo "Image pushed successfully to ${IMAGE_DESTINATION}"
    rules:
      - if: $CI_COMMIT_BRANCH =~ /^container.*/ 
      - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^container.*/'

analysis-test-job:   
  stage: test   
  dependencies:
    - voms_proxy
  image: ${CI_REGISTRY_IMAGE}:latest
  tags:
    - k8s-cvmfs
  script:
    - source .ci-workflows/analysis-test-job.sh
  artifacts: 
    expire_in: 1 day
    paths:
      - python/analysis/hists/test.coffea


analysis-plot-job:    
  stage: plot 
  dependencies: 
    - analysis-test-job
  image: ${CI_REGISTRY_IMAGE}:latest 
  tags:
    - k8s-cvmfs
  script:
    - source .ci-workflows/analysis-plot-job.sh
  artifacts:
    expire_in: 1 day
    paths:
      - python/analysis/testCoffeaPlots/RunII/

analysis-cutflow-job:    
  stage: plot 
  dependencies: 
    - analysis-test-job
  image: ${CI_REGISTRY_IMAGE}:latest
  tags:
    - k8s-cvmfs
  script:
    - source .ci-workflows/analysis-cutflow-job.sh

baseclass-test-job:   
  stage: build
  image: ${CI_REGISTRY_IMAGE}:latest
  tags:
    - k8s-cvmfs
  script:
    - source .ci-workflows/baseclass-test-job.sh

#analysis-testAll-job:   
#  stage: test   
#  dependencies:
#    - voms_proxy
#  image: ${CI_REGISTRY_IMAGE}:latest
#  tags:
#    - k8s-cvmfs
#  script:
#    - source .ci-workflows/analysis-testAll-job.sh
#  rules:
#    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
#      when: manual


#analysis-cutflow-job:   
#  stage: test   
#  dependencies:
#    - voms_proxy
#  image: coffeateam/coffea-dask:latest
#  tags:
#    - k8s-cvmfs
#  script:
#    - export X509_USER_PROXY=${PWD}/proxy/x509_proxy
#    - voms-proxy-info
#    - cd python/
#    - python runner.py -d data        -p analysis/processors/processor_HH4b.py  -y UL16_preVFP UL16_postVFP UL17 UL18 -o histAll.coffea
#    - python analysis/tests/cutflow_testAll.py
#  artifacts: 
#    expire_in: 1 day
#    paths:
#      - python/hists/histAll.coffea
#


##### To build cmssw - but not needed now
#build_cmssw:
#  stage: build
#  tags:
#    - k8s-cvmfs
#  variables:
#    CMS_PATH: /cvmfs/cms.cern.ch
#    CMSSW_RELEASE: CMSSW_11_1_1
#  script:
#    - shopt -s expand_aliases
#    - set +u && source ${CMS_PATH}/cmsset_default.sh; set -u
#    - cmsrel ${CMSSW_RELEASE}
#    - cd ${CMSSW_RELEASE}/src
#    - cmsenv
#    # If within CERN, we can speed up interaction with CMSSW:
#    - export CMSSW_MIRROR=https://:@git.cern.ch/kerberos/CMSSW.git
#    # This is another trick to speed things up independent of your location:
#    - export CMSSW_GIT_REFERENCE=/cvmfs/cms.cern.ch/cmssw.git.daily
#    # Important: run git cms-init with --upstream-only flag to not run into
#    # problems with git config
#    - git cms-init --upstream-only
#    - source set_env.sh
#
#
#
#.docker_build:
#  image:
#    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
#    entrypoint: [""]
#  script:
#    # Prepare Kaniko configuration file
#    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
#    # Build and push the image from the Dockerfile at the root of the project.
#    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/$dockerfile --destination $IMAGE_DESTINATION
#    # Print the full registry path of the pushed image
#    - echo "Image pushed successfully to ${IMAGE_DESTINATION}"
#
#build-cmssw: 
#  stage: build
#  extends: .docker_build
#  tags:
#    - cvmfs
#  variables:
#    IMAGE_DESTINATION: $CI_REGISTRY_IMAGE:cmssw
#    dockerfile: Dockerfile

