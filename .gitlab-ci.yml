workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PROJECT_NAMESPACE == "cms-cmu" && $CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BEFORE_SHA !~ /0{40}/'
      changes:
        - "{*[^.]md*,*.[^m]*,*.m,*.m[^d]*,*.md?*,*[^d]}"

stages:          
  - build
  - test
  - plot

voms_proxy:
  stage: build
  image: gitlab-registry.cern.ch/cms-cloud/cmssw-docker/cc7-cms 
  artifacts:
    paths:
      - proxy
  script:
    - mkdir -p ${HOME}/.globus
    - printf "${GRID_USERCERT}" | base64 -d > ${HOME}/.globus/usercert.pem
    - printf "${GRID_USERKEY}" | base64 -d > ${HOME}/.globus/userkey.pem
    - chmod 400 ${HOME}/.globus/userkey.pem
    - printf "${GRID_PASSWORD}" | base64 -d | voms-proxy-init --voms cms --pwstdin
    - voms-proxy-info --all
    - export VOMSPROXY=$(voms-proxy-info -path)
    - mkdir proxy
    - cp ${VOMSPROXY} proxy/x509_proxy


coffea-test-job:   
  stage: test   
  dependencies:
    - voms_proxy
  image: gitlab-registry.cern.ch/cms-cloud/cmssw-docker/cc7-cms 
  tags:
    - k8s-cvmfs
  script:
    - set +e && source /cvmfs/sft.cern.ch/lcg/views/LCG_103/x86_64-centos7-gcc11-opt/setup.sh; set -e
    - export X509_USER_PROXY=${PWD}/proxy/x509_proxy
    - voms-proxy-info
    - cd analysis/
    - source runTestJob.sh
    - ls 
  artifacts: 
    expire_in: 1 day
    paths:
      - analysis/test.pkl


plot-job:    
  stage: plot 
  dependencies: 
    - coffea-test-job
  image: gitlab-registry.cern.ch/cms-cloud/cmssw-docker/cc7-cms 
  tags:
    - k8s-cvmfs
  script:
    - set +e && source /cvmfs/sft.cern.ch/lcg/views/LCG_103/x86_64-centos7-gcc11-opt/setup.sh; set -e
    - ls 
    - python ${PWD}/analysis/uproot_plots.py -i ${PWD}/analysis/test.pkl
    - mkdir plots
    - mv *pdf plots/
  artifacts:
    expire_in: 1 year
    paths:
      - plots


##### To build cmssw - but not needed now
#build_cmssw:
#  stage: build
#  tags:
#    - k8s-cvmfs
#  variables:
#    CMS_PATH: /cvmfs/cms.cern.ch
#    CMSSW_RELEASE: CMSSW_11_1_1
#  script:
#    - shopt -s expand_aliases
#    - set +u && source ${CMS_PATH}/cmsset_default.sh; set -u
#    - cmsrel ${CMSSW_RELEASE}
#    - cd ${CMSSW_RELEASE}/src
#    - cmsenv
#    # If within CERN, we can speed up interaction with CMSSW:
#    - export CMSSW_MIRROR=https://:@git.cern.ch/kerberos/CMSSW.git
#    # This is another trick to speed things up independent of your location:
#    - export CMSSW_GIT_REFERENCE=/cvmfs/cms.cern.ch/cmssw.git.daily
#    # Important: run git cms-init with --upstream-only flag to not run into
#    # problems with git config
#    - git cms-init --upstream-only
#    - source set_env.sh
#
#
#
#.docker_build:
#  image:
#    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
#    entrypoint: [""]
#  script:
#    # Prepare Kaniko configuration file
#    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
#    # Build and push the image from the Dockerfile at the root of the project.
#    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/$dockerfile --destination $IMAGE_DESTINATION
#    # Print the full registry path of the pushed image
#    - echo "Image pushed successfully to ${IMAGE_DESTINATION}"
#
#build-cmssw: 
#  stage: build
#  extends: .docker_build
#  tags:
#    - cvmfs
#  variables:
#    IMAGE_DESTINATION: $CI_REGISTRY_IMAGE:cmssw
#    dockerfile: Dockerfile

