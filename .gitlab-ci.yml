#workflow:
#  rules:
#    - if: $CI_COMMIT_TAG
#      when: never
#    - if: '$CI_PROJECT_NAMESPACE == "cms-cmu" && $CI_COMMIT_BRANCH == "master"'

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

voms_proxy:
  stage: build
  image: gitlab-registry.cern.ch/clange/grid-proxy-test:master
  artifacts:
    paths:
      - proxy
  script:
    - mkdir -p ${HOME}/.globus
    - printf "${GRID_USERCERT}" | base64 -d > ${HOME}/.globus/usercert.pem
    - printf "${GRID_USERKEY}" | base64 -d > ${HOME}/.globus/userkey.pem
    - chmod 400 ${HOME}/.globus/userkey.pem
    - printf "${GRID_PASSWORD}" | base64 -d | voms-proxy-init --voms cms --pwstdin
    - voms-proxy-info --all
    - export VOMSPROXY=$(voms-proxy-info -path)
    - mkdir proxy
    - cp ${VOMSPROXY} proxy/x509_proxy

##### To build cmssw - but not needed now
#build_cmssw:
#  stage: build
#  tags:
#    - k8s-cvmfs
#  variables:
#    CMS_PATH: /cvmfs/cms.cern.ch
#    CMSSW_RELEASE: CMSSW_11_1_1
#  script:
#    - shopt -s expand_aliases
#    - set +u && source ${CMS_PATH}/cmsset_default.sh; set -u
#    - cmsrel ${CMSSW_RELEASE}
#    - cd ${CMSSW_RELEASE}/src
#    - cmsenv
#    # If within CERN, we can speed up interaction with CMSSW:
#    - export CMSSW_MIRROR=https://:@git.cern.ch/kerberos/CMSSW.git
#    # This is another trick to speed things up independent of your location:
#    - export CMSSW_GIT_REFERENCE=/cvmfs/cms.cern.ch/cmssw.git.daily
#    # Important: run git cms-init with --upstream-only flag to not run into
#    # problems with git config
#    - git cms-init --upstream-only
#    - source set_env.sh
#
#
#
.docker_build:
  image:
    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    entrypoint: [""]
  script:
    # Prepare Kaniko configuration file
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # Build and push the image from the Dockerfile at the root of the project.
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/$dockerfile --destination $IMAGE_DESTINATION
    # Print the full registry path of the pushed image
    - echo "Image pushed successfully to ${IMAGE_DESTINATION}"
#
#build-cmssw: 
#  stage: build
#  extends: .docker_build
#  tags:
#    - cvmfs
#  variables:
#    IMAGE_DESTINATION: $CI_REGISTRY_IMAGE:cmssw
#    dockerfile: Dockerfile


unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  dependencies:
    - voms_proxy
  tags:
    - k8s-cvmfs
  image: gitlab-registry.cern.ch/cms-cloud/cmssw-docker/cc7-cms 
  script:
    - set +e && source /cvmfs/sft.cern.ch/lcg/views/LCG_103/x86_64-centos7-gcc11-opt/setup.sh; set -e
    - echo "Running unit tests... This will take about 60 seconds."
    - python analysis/coffea_analysis.py
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
