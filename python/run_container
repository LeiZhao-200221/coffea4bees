#!/usr/bin/env bash

# Script to run either a coffea, combine, or snakemake container

# Function to display help message
show_help() {
  echo "Usage: $0 [command] [options]"
  echo ""
  echo "Commands:"
  echo "  coffea [command...]   Run commands inside the coffea container."
  echo "                        Opens an interactive shell if no commands are given."
  echo "                        (Interactive shell is the only option to run on LPC HTCondor)."
  echo "  combine [command...]  Run commands inside the combine container."
  echo "                        Opens an interactive shell if no commands are given."
  echo "  snakemake [options]   Run snakemake with the specified options."
  echo "                        Requires --snakefile argument."
  echo "  --help                Show this help message."
  echo ""
  echo "Examples:"
  echo "  $0 coffea              Open an interactive shell in the coffea container."
  echo "  $0 coffea python --version  Run 'python --version' in the coffea container."
  echo "  $0 combine             Open an interactive shell in the combine container."
  echo "  $0 combine combine -M AsymptoticLimits  Run combine in the combine container."
  echo "  $0 snakemake --snakefile Snakefile  Run snakemake with the specified Snakefile."
}

# Define default paths
COFFEA_IMAGE="gitlab-registry.cern.ch/cms-cmu/coffea4bees:latest"
COMBINE_IMAGE="gitlab-registry.cern.ch/cms-analysis/general/combine-container:CMSSW_11_3_4-combine_v9.1.0-harvester_v2.1.0"
SNAKEMAKE_IMAGE="gitlab-registry.cern.ch/cms-cmu/coffea4bees:reana_latest"

if [ -d '/cvmfs' ]; then
    COFFEA_IMAGE="/cvmfs/unpacked.cern.ch/${COFFEA_IMAGE}"
    COMBINE_IMAGE="/cvmfs/unpacked.cern.ch/${COMBINE_IMAGE}"
    SNAKEMAKE_IMAGE="/cvmfs/unpacked.cern.ch/${SNAKEMAKE_IMAGE}"
fi

## Define paths for LPC CONDOR
LPC_CONDOR_CONFIG=/etc/condor/config.d/01_cmslpc_interactive
LPC_CONDOR_LOCAL=/usr/local/bin/cmslpc-local-conf.py


# Set APPTAINER_BINDPATH dynamically
if [[ $(hostname) == *"cmslpc"* ]]; then
export APPTAINER_BINDPATH=/uscms/,/uscms_data/,/uscmst1b_scratch,/cvmfs,/cvmfs/grid.cern.ch/etc/grid-security:/etc/grid-security
else
export APPTAINER_BINDPATH=/cvmfs,/cvmfs/grid.cern.ch/etc/grid-security:/etc/grid-security
fi

if [[ $(hostname) == *"cmslpc"* ]]; then

  # Create .cmslpc-local-conf if it doesn't exist
  if [ ! -f ".cmslpc-local-conf" ]; then
    cat <<EOF > .cmslpc-local-conf
#!/bin/bash
python3 ${LPC_CONDOR_LOCAL}.orig | grep -v "LOCAL_CONFIG_FILE"
EOF
    chmod +x .cmslpc-local-conf
  fi

  # Create .bashrc if it doesn't exist or append if it does
  if [ ! -f ".bashrc" ]; then
    cat <<EOF > .bashrc
LPCJQ_VERSION="0.4.1"
install_env() {
  set -e
  echo "Installing shallow virtual environment in \$PWD/.env..."
  python -m venv --without-pip --system-site-packages .env
  unlink .env/lib64  # HTCondor can't transfer symlink to directory and it appears optional
  # work around issues copying CVMFS xattr when copying to tmpdir
  export TMPDIR=\$(mktemp -d -p .)
  .env/bin/python -m ipykernel install --user
  rm -rf \$TMPDIR && unset TMPDIR
  .env/bin/python -m pip install -q git+https://github.com/CoffeaTeam/lpcjobqueue.git@v\${LPCJQ_VERSION}
  echo "done."
  set +e
}

export CONDOR_CONFIG=${LPC_CONDOR_CONFIG}
export JUPYTER_PATH=/srv/.jupyter
export JUPYTER_RUNTIME_DIR=/srv/.local/share/jupyter/runtime
export JUPYTER_DATA_DIR=/srv/.local/share/jupyter
export IPYTHONDIR=/srv/.ipython
unset GREP_OPTIONS

[[ -d .env ]] || install_env
source .env/bin/activate
alias pip="python -m pip"
pip show lpcjobqueue 2>/dev/null | grep -q "Version: \${LPCJQ_VERSION}" || pip install -q git+https://github.com/CoffeaTeam/lpcjobqueue.git@v\${LPCJQ_VERSION}
EOF
  else
    cat <<EOF >> .bashrc
# Additions for coffea4bees container
export CONDOR_CONFIG=${LPC_CONDOR_CONFIG}
export JUPYTER_PATH=/srv/.jupyter
export JUPYTER_RUNTIME_DIR=/srv/.local/share/jupyter/runtime
export JUPYTER_DATA_DIR=/srv/.local/share/jupyter
export IPYTHONDIR=/srv/.ipython
unset GREP_OPTIONS

[[ -d .env ]] || install_env
source .env/bin/activate
alias pip="python -m pip"
pip show lpcjobqueue 2>/dev/null | grep -q "Version: \${LPCJQ_VERSION}" || pip install -q git+https://github.com/CoffeaTeam/lpcjobqueue.git@v\${LPCJQ_VERSION}
EOF
  fi

fi


# Check if apptainer is installed
command -v apptainer >/dev/null 2>&1 || { echo >&2 "Error: apptainer is not installed.  Aborting."; exit 1; }


# Function to run the coffea container
run_coffea() {

  if [[ $(hostname) == *"cmslpc"* ]]; then
    export APPTAINER_BINDPATH=${APPTAINER_BINDPATH}${APPTAINER_BINDPATH:+,},${LPC_CONDOR_CONFIG},${LPC_CONDOR_LOCAL}:${LPC_CONDOR_LOCAL}.orig,.cmslpc-local-conf:${LPC_CONDOR_LOCAL}
    load_bash="--rcfile /srv/.bashrc"
  else
    load_bash=""
  fi

  if [ -z "$*" ]; then
    # No further arguments, just open the container
    APPTAINER_SHELL=$(which bash) apptainer exec -B ${PWD}:/srv --pwd /srv \
      "$COFFEA_IMAGE" \
      /bin/bash $load_bash
  else
    # Arguments provided, run them inside the container
    APPTAINER_SHELL=$(which bash) apptainer exec -B ${PWD}:/srv --pwd /srv \
      "$COFFEA_IMAGE" \
      /bin/bash $load_bash -c "$*"
  fi
}

# Function to run the combine container
run_combine() {
  
  export APPTAINER_CACHEDIR="/tmp/$(whoami)/apptainer_cache"
  export APPTAINER_TMPDIR="/tmp/.apptainer/"
  export MPLCONFIGDIR="/tmp/$(whoami)/.config/matplotlib"

  COMBINE_SETUP="source /cvmfs/cms.cern.ch/cmsset_default.sh && cd /home/cmsusr/CMSSW_11_3_4/ && cmsenv && cd /home/cmsusr/coffea4bees/"

  if [ -z "$*" ]; then
    # No further arguments, just open the container
    APPTAINER_SHELL=$(which bash) apptainer exec -B ${PWD}:/home/cmsusr/coffea4bees --pwd /home/cmsusr/coffea4bees/ \
      ${COMBINE_IMAGE} \
      /bin/bash -i -c "$COMBINE_SETUP && bash"
  else
    # Arguments provided, run them inside the container
    APPTAINER_SHELL=$(which bash) apptainer exec -B ${PWD}:/home/cmsusr/coffea4bees --pwd /home/cmsusr/coffea4bees/ \
      ${COMBINE_IMAGE} \
      /bin/bash -c "$COMBINE_SETUP && $*"
  fi
}

# Function to run snakemake
run_snakemake() {
  if [ -z "$1" ]; then
    echo "Error: No argument supplied. Please provide the snakefile."
    echo "Usage: $0 snakemake --snakefile <snakefile>"
    echo "You can also provide additional snakemake arguments."
    echo "Useful snakemake arguments: --cores, --use-singularity, --use-apptainer, --printshellcmds, --rerun-incomplete, --force"
    exit 1
  fi

  apptainer exec -B ${PWD}:/srv --pwd /srv ${SNAKEMAKE_IMAGE} snakemake "$@"
}

# Main logic: check arguments and run the appropriate container
if [ "$1" == "--help" ]; then
  show_help
  exit 0
fi

if [ -z "$1" ]; then
  # If no arguments, just run coffea with the default image
  run_coffea
else
  case "$1" in
    "combine")
      run_combine "${@:2}" # Run combine, passing along any remaining arguments
      ;;
    "snakemake")
      run_snakemake "${@:2}" # Run snakemake, passing along any remaining arguments
      ;;
    *)
      # If not combine or snakemake, assume the arguments are commands for coffea
      run_coffea "$@"
      ;;
  esac
fi