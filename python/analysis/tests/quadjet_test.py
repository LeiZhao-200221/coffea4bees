import unittest
import argparse
from coffea.util import load
import yaml
#from parser import wrapper
import sys
from copy import copy

import numpy as np
import awkward as ak
from coffea.nanoevents.methods import vector
import time

import os
sys.path.insert(0, os.getcwd())
from analysis.helpers.candidates_selection import create_cand_jet_dijet_quadjet


class quadJetTestCase(unittest.TestCase):

    @classmethod
    def setUpClass(self):
        #self.inputFile = wrapper.args["inputFile"]


        #
        # Test vectors from picos
        #
        jets = {'pt': [[128.5232696533203, 137.2931671142578, 102.92809295654297, 77.47484588623047, 71.34617614746094, 62.128841400146484, 68.88739013671875, 38.800235748291016, 36.9649658203125, 19.756742477416992], [216.89984130859375, 111.17002868652344, 56.37800216674805, 60.38277816772461, 59.55803680419922, 12.968124389648438], [121.47314453125, 99.50099182128906, 87.97504425048828, 58.04212951660156, 46.28016662597656, 17.778413772583008], [128.4789581298828, 103.71036529541016, 82.3817138671875, 52.32249069213867, 43.95781707763672, 14.017626762390137], [152.3646697998047, 85.86214447021484, 99.11544799804688, 54.174644470214844, 21.949949264526367, 16.227697372436523], [78.90026092529297, 70.35977935791016, 80.03837585449219, 52.89613342285156, 14.291627883911133], [168.599365234375, 97.20349884033203, 64.1768569946289, 44.81467819213867, 28.814924240112305], [266.48114013671875, 213.62109375, 160.90719604492188, 119.12213897705078, 146.8079833984375, 45.11876678466797, 48.17640686035156, 15.157373428344727], [121.93083953857422, 99.38177490234375, 90.92050170898438, 77.18234252929688, 63.08937072753906, 39.87710189819336, 17.568593978881836, 22.291053771972656, 14.922198295593262, 14.740988731384277], [187.21279907226562, 68.84657287597656, 53.856868743896484, 63.4405632019043, 37.59251403808594, 19.025859832763672]], 'eta': [[-0.4742431640625, 0.41998291015625, 2.2939453125, -0.4420166015625, -3.07763671875, 1.742919921875, -1.947265625, 3.384765625, -0.5281982421875, -3.20947265625], [1.093017578125, 0.611083984375, 0.49591064453125, 1.81982421875, -0.1649169921875, 3.43505859375], [0.751220703125, -0.9893798828125, -1.99365234375, 0.811767578125, 0.123046875, -1.5498046875], [-1.15478515625, -0.938232421875, -1.739501953125, -0.046875, 1.46337890625, -0.4168701171875], [1.4404296875, 1.465576171875, 0.912841796875, 0.72119140625, 0.5338134765625, 0.962890625], [-2.01708984375, 0.6070556640625, 0.7105712890625, -1.38916015625, -2.03173828125], [1.240966796875, 0.8861083984375, 0.76904296875, 0.233551025390625, 0.48675537109375], [-0.9765625, 3.27392578125, 0.68017578125, -1.36376953125, 0.0424652099609375, -1.951171875, 2.91943359375, -2.2587890625], [-1.89599609375, 0.2989501953125, -0.036285400390625, -0.16253662109375, 0.7965087890625, -1.261962890625, -3.2763671875, -0.37493896484375, -1.028076171875, 2.17919921875], [-0.18695068359375, 1.228759765625, -1.884521484375, -0.32611083984375, -0.760986328125, -0.23046875]], 'phi': [[-1.02880859375, 1.610107421875, 0.869873046875, 2.96533203125, -2.46826171875, -1.005126953125, -2.75830078125, 2.47021484375, 0.672607421875, -3.12109375], [1.568359375, -1.586181640625, -2.146484375, -1.454833984375, -1.16357421875, 2.35595703125], [1.72216796875, -2.82763671875, -0.81689453125, 1.140869140625, -2.53955078125, -0.741943359375], [-2.6884765625, 0.656982421875, 0.5703125, 3.12451171875, -1.54345703125, 0.33917236328125], [2.19384765625, -1.8662109375, 1.040771484375, -0.61083984375, -1.602294921875, 1.708984375], [2.97265625, -0.14459228515625, 0.26397705078125, -2.18994140625, 2.3662109375], [0.6195068359375, -1.97119140625, -2.50439453125, 1.967529296875, -2.20361328125], [-0.04168701171875, 0.7406005859375, -2.4755859375, 2.72998046875, -2.462890625, -2.9013671875, 2.7548828125, 2.236328125], [-1.40185546875, 1.426513671875, -1.992919921875, 1.551025390625, -1.29541015625, 1.40771484375, 0.67236328125, 2.8837890625, 2.04052734375, 1.838623046875], [-1.4033203125, 1.221435546875, 2.259765625, 1.095947265625, -2.5498046875, 1.82568359375]], 'mass': [[10.85073471069336, 13.923028945922852, 11.906595230102539, 7.676199436187744, 12.172236442565918, 11.79712200164795, 13.623549461364746, 4.522272109985352, 5.780577182769775, 2.313169479370117], [34.29933166503906, 13.6866455078125, 6.32964563369751, 9.209797859191895, 11.495323181152344, 2.791927727230359e-06], [16.76865005493164, 10.741584777832031, 10.103269577026367, 9.37913703918457, 7.152486801147461, 3.79345965385437], [23.283109664916992, 12.513895988464355, 10.43449592590332, 11.302002906799316, 4.067858695983887, 2.160611629486084], [19.69911003112793, 15.230377197265625, 11.674482345581055, 6.837667465209961, 5.207242965698242, 4.465616226196289], [12.601686477661133, 9.440410614013672, 6.962043285369873, 9.783699989318848, 3.4577717781066895], [19.69295883178711, 11.80688762664795, 7.641148567199707, 7.214219093322754, 1.621802568435669], [13.958892822265625, 22.145925521850586, 18.331396102905273, 14.442241668701172, 15.197429656982422, 8.536471366882324, 6.172101974487305, 4.102391719818115], [18.509063720703125, 13.490421295166016, 9.536563873291016, 11.10525894165039, 9.65819263458252, 5.932823181152344, 2.932080268859863, 4.292327404022217, 3.1072590351104736, 3.451584577560425], [12.344427108764648, 9.173913955688477, 8.867069244384766, 8.930035591125488, 5.537140846252441, 4.722408771514893]], 'btagScore': [[0.99951171875, 0.99951171875, 0.004058837890625, 0.99951171875, -1.0, 0.0191192626953125, 0.9404296875, -1.0, 0.0194854736328125, -1.0], [0.990234375, 0.0040130615234375, 0.99951171875, 0.8193359375, 0.99755859375, -1.0], [0.25439453125, 0.99853515625, 0.37353515625, 0.0347900390625, 0.51416015625, 0.0080108642578125], [0.5361328125, 0.9990234375, 0.9326171875, 0.06475830078125, 0.249755859375, 0.050811767578125], [0.7265625, 0.9990234375, 0.99609375, 0.264892578125, 0.0092926025390625, 0.018402099609375], [0.99609375, 0.9765625, 0.90673828125, 0.33544921875, -1.0], [0.85546875, 0.99951171875, 0.99951171875, 0.3427734375, 0.00450897216796875], [0.9990234375, -1.0, 0.0112762451171875, 0.42431640625, 0.99755859375, 0.99462890625, -1.0, -1.0], [0.0038509368896484375, 0.75244140625, 0.98974609375, 0.9970703125, 0.998046875, 0.004924774169921875, -1.0, 0.01470184326171875, -1.0, -1.0], [0.9990234375, 0.00794219970703125, 0.994140625, 0.998046875, 0.99853515625, 0.009307861328125]], 'bRegCorr': [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], 'puId': [[10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [10, 10, 10, 10, 10, 10], [10, 10, 10, 10, 10, 10], [10, 10, 10, 10, 10, 10], [10, 10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10, 10, 10, 10], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [10, 10, 10, 10, 10, 10]], 'jetId': [[6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 4], [6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6], [6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6]], 'selected': [[True, True, True, True, False, True, True, False, True, False], [True, True, True, True, True, False], [True, True, True, True, True, False], [True, True, True, True, True, False], [True, True, True, True, False, False], [True, True, True, True, False], [True, True, True, True, False], [True, False, True, True, True, True, False, False], [True, True, True, True, True, True, False, False, False, False], [True, True, True, True, True, False]], 'selected_loose': [[True, True, True, True, True, True, True, True, True, False], [True, True, True, True, True, False], [True, True, True, True, True, False], [True, True, True, True, True, False], [True, True, True, True, True, False], [True, True, True, True, False], [True, True, True, True, True], [True, True, True, True, True, True, True, False], [True, True, True, True, True, True, False, True, False, False], [True, True, True, True, True, False]]}



        self.input_jets = ak.zip(
            {
                "pt": jets["pt"],
                "eta": jets["eta"],
                "phi": jets["phi"],
                "mass": jets["mass"],
                "btagScore": jets["btagScore"],
                "bRegCorr": jets["bRegCorr"],
                "puId": jets["puId"],
                "jetId": jets["jetId"],
                "selected": jets["selected"],
                "selected_loose": jets["selected_loose"],
            },
            with_name="PtEtaPhiMLorentzVector",
            behavior=vector.behavior,
        )


        # Dynamic class creation
        class DictToClass:
            def __init__(self, data):
                for key, value in data.items():
                    setattr(self, key, value)

            def __setitem__(self, key, value):
                setattr(self, key, value)

            def __getitem__(self, key):
                return getattr(self, key)


        event_dict = {}
        event_dict["Jet"] = self.input_jets
        event_dict["event"] = range(len(self.input_jets))
        event_dict["fields"] = event_dict.keys()
        self.event = DictToClass(event_dict)



    def test_quadJets(self):

        self.event = create_cand_jet_dijet_quadjet(self.event, isRun3=True)

#        top_cands = find_tops(self.input_jets)
#
#        _, rec_top_cands = buildTop(self.input_jets, top_cands)
#        xW_min = rec_top_cands[:, 0].xW
#        xbW_min = rec_top_cands[:, 0].xbW
#
#        xW_allClose = np.allclose(xW_min.to_list(), self.output_xW, atol=1e-3)
#        if not xW_allClose:
#            print([xW_min[i] for i in range(len(xW_min))])
#            print(f"xW_min is {xW_min} vs {self.output_xW}  diff {xW_min - self.output_xW}   ({(xW_min - self.output_xW)/self.output_xW})")
#            print(f'\nself.output_xW  = {[xW_min[i] for i in range(len(xW_min))]}')
#
#        # print([xbW_min[i] for i in range(len(xbW_min))])
#        # print(f"xbW_min is {xbW_min} vs {self.output_xbW} diff {xbW_min - self.output_xbW} ({(xbW_min - self.output_xbW)/self.output_xbW})")
#
#        xbW_allClose = np.allclose(xbW_min.to_list(), self.output_xbW, atol=1e-3)
#        if not xbW_allClose:
#            print([xbW_min[i] for i in range(len(xbW_min))])
#            print(f"xbW_min is {xbW_min} vs {self.output_xbW}  diff {xbW_min - self.output_xbW}   ({(xbW_min - self.output_xbW)/self.output_xbW})")
#            print(f'\nself.output_xbW  = {[xbW_min[i] for i in range(len(xbW_min))]}')
#
#        self.assertTrue(xW_allClose, "xW Arrays are not close enough")
#        self.assertTrue(xbW_allClose, "xbW Arrays are not close enough")


if __name__ == '__main__':
    wrapper.parse_args()
    unittest.main(argv=sys.argv)
