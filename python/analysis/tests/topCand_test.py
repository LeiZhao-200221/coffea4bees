import unittest
import argparse
from coffea.util import load
import yaml
from parser import wrapper
import sys

import numpy as np
import awkward as ak
from coffea.nanoevents.methods import vector
import time

import os
sys.path.insert(0, os.getcwd())
from analysis.helpers.topCandReconstruction import find_tops, find_tops_slow, buildTop


class topCandRecoTestCase(unittest.TestCase):

    @classmethod
    def setUpClass(self):
        self.inputFile = wrapper.args["inputFile"]

#        #
#        # Test vectors from picos
#        #   (All four jet events for now)
#        self.input_jet_pt = [[243, 223, 71.8, 67.8], [181, 119, 116, 96.9], [208, 189, 62.4, 52.1],  [118, 64.6, 58.6, 44.1]]
#        self.input_jet_eta = [[1.51, 0.516, 0.656, 0.99], [2.02, 0.795, 0.747, 1.45], [1.09, -0.219, 1.5, 0.66],  [0.802, 1.48, 1.56, -0.822]]
#        self.input_jet_phi = [[-2.88, 0.5, -1.88, 0.118], [-0.834, 1.87, 2.71, 1.8], [2.21, -0.736, -2.53, 2.12],  [-2.84, 0.558, 2.06, -0.639]]
#        self.input_jet_mass = [[28.9, 30.8, 9.66, 13.2], [19.7, 22.8, 15.8, 12.2], [25.8, 24.7, 8.77, 7.87],  [19, 13.1, 10, 7.66] ]
#        self.input_jet_btagDeepFlavB = [[0.999, 0.907, 0.0116, 0.685], [0.603, 1, 0.997, 0.646], [0.985, 0.975, 0.0113, 0.967], [0.999, 0.00486, 0.764, 1]]
#        self.input_jet_bRegCorr = [[1.1, 1.12, 1.07, 1.02], [0.962, 1, 1.18, 0.977], [1.01, 1.01, 1.09, 1.29],  [1.03, 1.04, 1.18, 0.961]]
#
#
#        self.output_jet_indices = [[(0, 2, 3), (1, 2, 3)],
#                                   [(0, 2, 3), (1, 2, 3)],
#                                   [(0, 2, 3), (1, 2, 3)],
#                                   [(0, 2, 3), (1, 2, 3)],
#                               ]
#
#        # From the c++
#        #self.output_xbW =  [5.1162261962890625, 3.6441168785095215, 0.7684999108314514, 5.11277961730957]
#        # self.output_xW = [3.4038572311401367, 7.014884948730469, 1.7819664478302002, 0.7852322459220886]
#
#        # From the python
#        self.output_xbW = [5.096315417599527, 3.6632132901855132, 0.7625406154799873, 5.152339072484923]
#        self.output_xW = [3.4008176212106584, 7.01853836034002, 1.8171329974077641, 0.7874135023333089]
#
        #
        # Test vectors from picos   
        #   (from analysis.helpers.topCandReconstruction import dumpTopCandidateTestVectors
        #
        self.input_jet_pt  = [[166.875, 75.6875, 71.125, 68.625, 64.9375, 43.25], [242.75, 223.25, 71.75, 67.8125], [189.0, 137.75, 89.8125, 63.6875], [158.875, 120.3125, 68.1875, 44.46875], [369.5, 329.75, 306.75, 71.0625, 61.34375], [177.5, 173.5, 58.5, 46.0625, 43.90625], [143.25, 86.5, 66.6875, 56.15625], [326.5, 264.5, 83.6875, 53.25, 41.21875], [129.75, 92.75, 85.5625, 71.25, 61.625], [129.0, 87.0625, 73.6875, 50.6875], [85.375, 77.25, 76.5625, 70.4375, 43.09375], [166.0, 100.75, 91.1875, 89.0, 67.0625, 59.5, 55.3125], [171.75, 119.0625, 90.75, 88.8125, 78.3125, 53.78125], [347.25, 271.25, 132.75, 123.375, 43.5625], [311.0, 234.0, 62.59375, 43.875, 41.625]]
        self.input_jet_eta = [[0.12744140625, -0.39373779296875, 1.99951171875, -2.2724609375, -0.96630859375, -1.056640625], [1.5078125, 0.5162353515625, 0.656005859375, 0.989990234375], [-1.399658203125, -1.762451171875, 1.920654296875, -1.12548828125], [1.3994140625, 0.35406494140625, 0.47808837890625, 2.16259765625], [0.96044921875, -1.789794921875, -2.0615234375, -0.533447265625, -1.533935546875], [-2.01318359375, 1.222900390625, -1.53466796875, -1.592529296875, 0.529296875], [-0.0951995849609375, -0.9898681640625, 0.0812530517578125, 1.86181640625], [0.211456298828125, 0.46728515625, -2.29833984375, 1.163330078125, -0.042877197265625], [-1.47216796875, -0.9554443359375, -0.8255615234375, -1.239990234375, 0.74755859375], [1.383544921875, -0.81494140625, -0.8162841796875, -0.137054443359375], [2.330078125, -1.32763671875, -2.18896484375, -0.06976318359375, -1.641845703125], [0.48834228515625, 0.30426025390625, -1.1181640625, -0.5858154296875, 0.10638427734375, 1.3486328125, -0.6053466796875], [2.2421875, -1.83203125, -1.060302734375, -2.30615234375, -1.935302734375, 1.317626953125], [0.457763671875, 0.25927734375, 0.365234375, 0.16217041015625, -0.499267578125], [0.1468505859375, 1.711669921875, -2.3115234375, -1.56396484375, -0.4757080078125]]
        self.input_jet_phi = [[-0.6795654296875, -0.0953521728515625, 2.78857421875, 2.47998046875, 1.622802734375, 2.841796875], [-2.88134765625, 0.500244140625, -1.8828125, 0.117706298828125], [0.48046875, 3.0244140625, -1.854736328125, 2.416015625], [-1.339599609375, 1.80859375, 1.196533203125, -2.1572265625], [1.4814453125, -0.48565673828125, -2.6708984375, 1.992919921875, -1.732421875], [-0.727783203125, 2.17333984375, -0.36859130859375, -2.07861328125, 1.5087890625], [0.589599609375, -0.690673828125, -0.0417327880859375, -2.56884765625], [-0.558349609375, 2.9482421875, 0.96630859375, -0.9903564453125, 1.903564453125], [-2.98193359375, -0.7108154296875, -0.120819091796875, 0.6470947265625, 2.7451171875], [-2.69873046875, -0.6180419921875, 1.167236328125, 0.35980224609375], [-0.29864501953125, -2.904296875, 0.6041259765625, -3.03271484375, 2.7275390625], [1.736572265625, 0.32257080078125, 2.685546875, -1.056640625, -2.07421875, -0.077728271484375, -2.2021484375], [1.994873046875, -1.298828125, -0.794677734375, 0.152008056640625, -0.6246337890625, 2.3330078125], [-1.08447265625, 1.9775390625, -2.17431640625, 1.4912109375, 1.51123046875], [0.5653076171875, -2.45068359375, -2.38134765625, 1.7353515625, -2.9423828125]]
        self.input_jet_mass = [[25.40625, 13.921875, 13.9453125, 16.328125, 11.7734375, 7.48828125], [28.875, 30.828125, 9.6640625, 13.171875], [27.71875, 17.890625, 15.7265625, 10.2734375], [19.59375, 16.859375, 13.8125, 7.35546875], [69.125, 33.5625, 56.28125, 7.9609375, 15.828125], [17.390625, 15.515625, 7.1328125, 7.7265625, 6.109375], [25.234375, 11.8828125, 14.03125, 11.671875], [44.53125, 38.3125, 19.265625, 9.8671875, 9.328125], [12.890625, 13.4140625, 16.1875, 12.3515625, 12.703125], [21.6875, 12.4375, 10.984375, 9.828125], [15.859375, 15.453125, 15.25, 10.9296875, 8.75], [29.171875, 16.03125, 17.9375, 9.671875, 12.7734375, 11.9765625, 7.9296875], [16.890625, 22.125, 13.265625, 16.4375, 14.265625, 8.4375], [32.3125, 33.5625, 22.109375, 15.59375, 8.1875], [33.125, 38.90625, 10.9765625, 7.54296875, 8.4140625]]
        self.input_jet_btagDeepFlavB = [[0.83642578125, 0.99755859375, 0.0118255615234375, 0.0114288330078125, 0.7685546875, 0.003086090087890625], [0.99853515625, 0.90673828125, 0.0116119384765625, 0.68505859375], [0.97412109375, 0.99951171875, 0.99853515625, 0.00460052490234375], [0.68798828125, 0.95654296875, 0.6943359375, 0.828125], [0.9228515625, 0.0070648193359375, 0.12322998046875, 0.86767578125, 0.98681640625], [0.115966796875, 0.96240234375, 0.4189453125, 0.016357421875, 0.74609375], [0.794921875, 0.8818359375, 0.71923828125, 0.00472259521484375], [0.99560546875, 0.986328125, 0.04046630859375, 0.82861328125, 0.0076141357421875], [0.9970703125, 0.9990234375, 0.01800537109375, 0.71875, 0.0220184326171875], [0.998046875, 0.9931640625, 0.0094146728515625, 0.98681640625], [0.008697509765625, 0.99951171875, 0.03277587890625, 0.87353515625, 0.99951171875], [0.01219940185546875, 0.005733489990234375, 0.031890869140625, 0.8505859375, 0.99951171875, 0.028289794921875, 0.982421875], [0.06024169921875, 0.9990234375, 0.00400543212890625, 0.316162109375, 0.009246826171875, 0.896484375], [0.0074462890625, 0.9990234375, 0.51806640625, 0.007282257080078125, 0.99951171875], [0.1065673828125, 0.004566192626953125, 0.921875, 0.9931640625, 0.6630859375]]
        self.input_jet_bRegCorr = [[1.0146484375, 0.91455078125, 0.962890625, 1.0166015625, 0.9736328125, 1.04296875], [1.0966796875, 1.1220703125, 1.0654296875, 1.01953125], [1.0439453125, 0.9697265625, 1.021484375, 1.0068359375], [0.982421875, 0.94189453125, 1.1396484375, 1.15625], [1.0615234375, 1.01953125, 1.0625, 1.2861328125, 1.197265625], [0.98486328125, 1.0625, 1.1328125, 1.099609375, 1.3125], [0.9912109375, 1.087890625, 0.9501953125, 0.9443359375], [0.9873046875, 1.01953125, 0.98388671875, 1.2294921875, 1.125], [1.1171875, 0.94482421875, 1.1162109375, 1.0849609375, 1.0654296875], [1.05859375, 1.044921875, 1.0947265625, 1.060546875], [1.005859375, 1.09375, 1.126953125, 1.1328125, 1.05859375], [0.984375, 1.0068359375, 1.130859375, 1.04296875, 1.04296875, 1.09765625, 1.2529296875], [1.0751953125, 1.0244140625, 0.95556640625, 1.0419921875, 0.9990234375, 1.064453125], [1.0029296875, 0.97802734375, 1.044921875, 1.0283203125, 1.0986328125], [1.08984375, 1.015625, 1.1142578125, 1.1005859375, 1.140625]]

        self.output_jet_indices  = [[(0, 2, 3), (0, 2, 4), (0, 2, 5), (0, 3, 4), (0, 3, 5), (0, 4, 5), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5)], [(0, 2, 3), (1, 2, 3)], [(0, 2, 3), (1, 2, 3)], [(0, 2, 3), (1, 2, 3)], [(0, 2, 3), (0, 2, 4), (0, 3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)], [(0, 2, 3), (0, 2, 4), (0, 3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)], [(0, 2, 3), (1, 2, 3)], [(0, 2, 3), (0, 2, 4), (0, 3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)], [(0, 2, 3), (0, 2, 4), (0, 3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)], [(0, 2, 3), (1, 2, 3)], [(0, 2, 3), (0, 2, 4), (0, 3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)], [(0, 2, 3), (0, 2, 4), (0, 2, 5), (0, 2, 6), (0, 3, 4), (0, 3, 5), (0, 3, 6), (0, 4, 5), (0, 4, 6), (0, 5, 6), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 6), (1, 3, 4), (1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (1, 5, 6), (2, 3, 4), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6), (2, 5, 6)], [(0, 2, 3), (0, 2, 4), (0, 2, 5), (0, 3, 4), (0, 3, 5), (0, 4, 5), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5)], [(0, 2, 3), (0, 2, 4), (0, 3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)], [(0, 2, 3), (0, 2, 4), (0, 3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]]

        #
        # From c++
        #
        # self.output_xbW = [-2.7918059825897217, 5.1162261962890625, 4.727130889892578, 3.0312094688415527, -4.019101142883301, 6.272866725921631, 3.479675054550171, 5.669109344482422, -3.4407107830047607, 1.27682626247406, 0.10858258605003357, 3.6182405948638916, 1.273585319519043, 3.778125047683716, -2.86118483543396]
        # self.output_xW = [-0.39036014676094055, 3.4038572311401367, 5.705265522003174, 6.434834003448486, 7.75262975692749, -0.072882279753685, 5.349752902984619, 2.8568272590637207, -1.0111900568008423, -1.9028347730636597, 8.955635070800781, 1.4891815185546875, 0.2653813660144806, 6.802727699279785, 8.877762794494629]

        #
        # From python
        #
        self.output_xW  = [-0.390360171220173, 3.4038571904279213, 5.70526576231768, 6.434834181421237, 7.752629673653642, -0.07288239580679283, 5.349752851020293, 2.856827637123832, -1.0111902754397808, -1.9028340765134588, 6.60285839335383, 1.4891820302114747, 0.26538192104362934, 6.513490994746587, 6.63404059277122]
        self.output_xbW  = [-2.7918050825235508, 5.1162267719961845, 4.727130519591312, 3.0312088017910024, -4.01910188548205, 6.272867248877358, 3.4796747758650155, 5.669108730668239, -3.4407102607690256, 1.2768255003030908, -3.858162457209922, 3.6182398320451257, 1.273584047243561, 3.530333293865891, 1.2436394126715848]

        self.input_jets = ak.zip(
            {
                "pt": self.input_jet_pt,
                "eta": self.input_jet_eta,
                "phi": self.input_jet_phi,
                "mass": self.input_jet_mass,
                "btagDeepFlavB": self.input_jet_btagDeepFlavB,
                "bRegCorr": self.input_jet_bRegCorr,
            },
            with_name="PtEtaPhiMLorentzVector",
            behavior=vector.behavior,
        )

        self.input_jets = self.input_jets[ak.argsort(self.input_jets.btagDeepFlavB, axis=1, ascending=False)]

    def test_topCand_time(self):

        start = time.perf_counter()
        top_cands = find_tops_slow(self.input_jets)
        end = time.perf_counter()
        elapsed_time_bare_python = (end - start)
        print(f"\nElapsed time Bare Python = {elapsed_time_bare_python}s")

        start = time.perf_counter()
        top_cands = find_tops(self.input_jets)
        end = time.perf_counter()
        elapsed_time_with_compilation = (end - start)
        print(f"Elapsed time (with compilation) = {elapsed_time_with_compilation}s")

        start = time.perf_counter()
        top_cands = find_tops(self.input_jets)
        end = time.perf_counter()
        elapsed_time_after_compilation = (end - start)
        print(f"Elapsed time (after compilation) = {elapsed_time_after_compilation}s")

        self.assertTrue(elapsed_time_after_compilation < elapsed_time_with_compilation,
                        f"{elapsed_time_after_compilation} is not less than {elapsed_time_bare_python}")

    def test_topCand(self):

        top_cands = find_tops(self.input_jets)
        # print(f'\nself.output_jet_indices  = {[top_cands[i].tolist() for i in range(len(top_cands))]}')
        for i in range(len(top_cands)):
            self.assertTrue(np.array_equal(top_cands[i].to_list(), self.output_jet_indices[i]), "Arrays are not equal")

    def test_buildTopCand(self):
        top_cands = find_tops(self.input_jets)

        rec_top_cands = buildTop(self.input_jets, top_cands)
        xW_min = rec_top_cands[:, 0].xW
        xbW_min = rec_top_cands[:, 0].xbW

        xW_allClose = np.allclose(xW_min.to_list(), self.output_xW, atol=1e-3)
        if not xW_allClose:
            print([xW_min[i] for i in range(len(xW_min))])
            print(f"xW_min is {xW_min} vs {self.output_xW}  diff {xW_min - self.output_xW}   ({(xW_min - self.output_xW)/self.output_xW})")
            print(f'\nself.output_xW  = {[xW_min[i] for i in range(len(xW_min))]}')

        # print([xbW_min[i] for i in range(len(xbW_min))])
        # print(f"xbW_min is {xbW_min} vs {self.output_xbW} diff {xbW_min - self.output_xbW} ({(xbW_min - self.output_xbW)/self.output_xbW})")

        xbW_allClose = np.allclose(xbW_min.to_list(), self.output_xbW, atol=1e-3)
        if not xbW_allClose:
            print([xbW_min[i] for i in range(len(xbW_min))])
            print(f"xbW_min is {xbW_min} vs {self.output_xbW}  diff {xbW_min - self.output_xbW}   ({(xbW_min - self.output_xbW)/self.output_xbW})")
            print(f'\nself.output_xbW  = {[xbW_min[i] for i in range(len(xbW_min))]}')

        self.assertTrue(xW_allClose, "xW Arrays are not close enough")
        self.assertTrue(xbW_allClose, "xbW Arrays are not close enough")


if __name__ == '__main__':
    wrapper.parse_args()
    unittest.main(argv=sys.argv)
